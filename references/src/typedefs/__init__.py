# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from enum import Enum
from typing import Any, Dict, List, Optional, Union, get_args, get_origin


class RootT(Enum):
    SUCHMANN_REFERENCES_ROOT = "suchmann.references.root"
    @classmethod
    def from_json_data(cls, data: Any) -> 'RootT':
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value

@dataclass
class Root:
    entries: 'List[Entry]'
    t: 'RootT'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Root':
        return cls(
            _from_json_data(List[Entry], data.get("entries")),
            _from_json_data(RootT, data.get("t")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["entries"] = _to_json_data(self.entries)
        data["t"] = _to_json_data(self.t)
        return data

@dataclass
class EntryField:
    key: 'str'
    value: 'Any'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntryField':
        return cls(
            _from_json_data(str, data.get("key")),
            _from_json_data(Any, data.get("value")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["key"] = _to_json_data(self.key)
        data["value"] = _to_json_data(self.value)
        return data

class EntryT(Enum):
    SUCHMANN_REFERENCES_ENTRY = "suchmann.references.entry"
    @classmethod
    def from_json_data(cls, data: Any) -> 'EntryT':
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value

@dataclass
class Entry:
    entry_type: 'str'
    fields: 'List[EntryField]'
    h: 'str'
    i: 'EntryI'
    t: 'EntryT'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Entry':
        return cls(
            _from_json_data(str, data.get("entry_type")),
            _from_json_data(List[EntryField], data.get("fields")),
            _from_json_data(str, data.get("h")),
            _from_json_data(EntryI, data.get("i")),
            _from_json_data(EntryT, data.get("t")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["entry_type"] = _to_json_data(self.entry_type)
        data["fields"] = _to_json_data(self.fields)
        data["h"] = _to_json_data(self.h)
        data["i"] = _to_json_data(self.i)
        data["t"] = _to_json_data(self.t)
        return data

@dataclass
class EntryI:
    key: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'EntryI':
        return cls(
            _from_json_data(str, data.get("key")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["key"] = _to_json_data(self.key)
        return data

@dataclass
class Node:
    t: 'NodeTypes'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Node':
        return cls(
            _from_json_data(NodeTypes, data.get("t")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["t"] = _to_json_data(self.t)
        return data

class NodeTypes(Enum):
    SUCHMANN_REFERENCES_ENTRY = "suchmann.references.entry"
    @classmethod
    def from_json_data(cls, data: Any) -> 'NodeTypes':
        return cls(data)

    def to_json_data(self) -> Any:
        return self.value

def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return { k: _from_json_data(get_args(cls)[1], v) for k, v in data.items() }
    return cls.from_json_data(data)

def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return { k: _to_json_data(v) for k, v in data.items() }
    return data.to_json_data()

def _parse_rfc3339(s: str) -> datetime:
    datetime_re = '^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$'
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError('Invalid RFC3339 date/time', s)

    (year, month, day, hour, minute, second, frac_seconds, offset,
     *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == 'Z':
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == '+' else -1

        if minutes not in range(60):
            raise ValueError('minute offset must be in 0..59')

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(int(year), int(month), int(day), int(hour), int(minute),
                    second_parsed, frac_seconds_parsed, tzinfo)            
